Microsoft (R) Macro Assembler Version 14.16.27027.1	    03/15/19 12:26:49
AddTwo.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000001E			rows	EQU		30
 = 00000050			cols	EQU		80
 = 00000960			gridS	EQU		rows * cols

 00000000			.data
 00000000 00			mRow	BYTE	?
 00000001 00			mCol	BYTE	?
 00000002 00			hRow	BYTE	?
 00000003 00			hCol	BYTE	?
 00000004 00			count	BYTE	0

 00000005  00000960 [		grid	BYTE	gridS DUP(0)
	    00
	   ]

 00000965 0000 0000		p1Pos	COORD	<>
 00000969 0000 0000		p2Pos	COORD	<>
 0000096D 00			p1Dir	BYTE	?	; 0 1 2 3
 0000096E 00			p2Dir	BYTE	?	; N E S W

 0000096F 50 6C 61 79 65	p1Win	BYTE	"Player 1 Wins",0
	   72 20 31 20 57
	   69 6E 73 00
 0000097D 50 6C 61 79 65	p2Win	BYTE	"Player 2 Wins",0
	   72 20 32 20 57
	   69 6E 73 00
 0000098B 49 74 27 73 20	tie		BYTE	"It's a Draw",0
	   61 20 44 72 61
	   77 00
 00000997 50 72 65 73 73	retry	BYTE	"Press r to Retry",0
	   20 72 20 74 6F
	   20 52 65 74 72
	   79 00

 000009A8 00			borT	BYTE	cols + 2 DUP("*"),0
 000009FB 2A			borM	BYTE	"*"
						BYTE	cols DUP(" ")
 00000A4C  2A 00				BYTE	"*",0

 00000000			.code
 00000000			main PROC
 00000000			L0:
 00000000  E8 00000000 E		call	Clrscr
 00000005  E8 0000005D			call	init

 0000000A			L1:
 0000000A  E8 00000143			call	input

 0000000F  80 3D 0000096D R		cmp p1Dir, 4		; exit
	   04
 00000016  74 3A			je LExit
 00000018  80 3D 0000096E R		cmp p2Dir, 4		; exit
	   04
 0000001F  74 31			je LExit

 00000021  FE 05 00000004 R		inc count
 00000027  80 3D 00000004 R		cmp count, 5		; keep checking for input
	   05
 0000002E  72 DA			jb L1

 00000030			L2:
 00000030  E8 00000219			call	update
 00000035  E8 00000385			call	check

 0000003A  83 F8 04			cmp EAX, 4			; retry
 0000003D  74 C1			je L0
 0000003F  83 F8 00			cmp EAX, 0			; exit
 00000042  75 0E			jne LExit

 00000044  E8 00000429			call	drawPs
 00000049  C6 05 00000004 R		mov count, 0		; start checking input for next loop
	   00
 00000050  EB B8			jmp L1

 00000052			LExit:					; reset
 00000052  B0 0F			mov AL, white
 00000054  B4 00			mov AH, black
 00000056  E8 00000000 E		call	SetTextColor
 0000005B  E8 00000000 E		call	Clrscr

					exit
 00000060  6A 00	   *	    push   +000000000h
 00000062  E8 00000000 E   *	    call   ExitProcess
 00000067			main ENDP

 00000067			init PROC USES EAX EBX
 00000067  50		   *	    push   eax
 00000068  53		   *	    push   ebx
 00000069  C6 05 00000000 R		mov mRow, rows
	   1E
 00000070  C6 05 00000001 R		mov mCol, cols
	   50

 00000077  B3 02			mov BL, 2
					
 00000079  66| 0F B6 05			movzx AX, mRow
	   00000000 R
 00000081  F6 F3			div BL
 00000083  A2 00000002 R		mov hRow, AL		; half number of rows

 00000088  66| 0F B6 05			movzx AX, mCol
	   00000001 R
 00000090  F6 F3			div BL
 00000092  A2 00000003 R		mov hCol, AL		; half number of columns

 00000097  FE 0D 00000000 R		dec mRow
 0000009D  FE 0D 00000001 R		dec mCol

 000000A3  66| B8 000A			mov AX, 10
 000000A7  66| A3			mov p1Pos.x, AX
	   00000965 R
 000000AD  66| 0F B6 05			movzx AX, hRow
	   00000002 R
 000000B5  66| A3			mov p1Pos.y, AX		; player 1 default position
	   00000967 R
					
 000000BB  C6 05 0000096D R		mov p1Dir, 1		; player 1 default direction
	   01


 000000C2  66| 0F B6 05			movzx AX, mCol
	   00000001 R
 000000CA  66| 83 E8 0A			sub AX, 10
 000000CE  66| A3			mov p2Pos.x, AX
	   00000969 R
 000000D4  66| 0F B6 05			movzx AX, hRow
	   00000002 R
 000000DC  66| A3			mov p2Pos.y, AX		; player 2 default position
	   0000096B R

 000000E2  C6 05 0000096E R		mov p2Dir, 3		; player 2 default direction
	   03

 000000E9  B9 00000960			mov ECX, gridS
 000000EE  BE 00000000			mov ESI, 0
 000000F3			L1:
 000000F3  C6 86 00000005 R		mov grid[ESI], 0	; clear matrix
	   00
 000000FA  46				inc ESI

 000000FB  E2 F6			loop L1

 000000FD  B0 0F			mov AL, white
 000000FF  B4 00			mov AH, black
 00000101  E8 00000000 E		call	SetTextColor

 00000106  B2 00			mov DL, 0
 00000108  B6 00			mov DH, 0
 0000010A  E8 00000000 E		call	Gotoxy			; top row
 0000010F  BA 000009A8 R		mov EDX, OFFSET borT
 00000114  E8 00000000 E		call	WriteString		; draw top border

 00000119  B9 0000001E			mov ECX, rows
 0000011E  BE 00000000			mov ESI, 0
 00000123			L2:
 00000123  46				inc ESI
 00000124  66| 8B C6			mov AX, SI
 00000127  B2 00			mov DL, 0
 00000129  8A F0			mov DH, AL
 0000012B  E8 00000000 E		call	Gotoxy			; update the row
 00000130  BA 000009FB R		mov EDX, OFFSET borM
 00000135  E8 00000000 E		call	WriteString		; draw side borders

 0000013A  E2 E7			loop L2

 0000013C  B2 00			mov DL, 0
 0000013E  B6 1F			mov DH, rows + 1
 00000140  E8 00000000 E		call	Gotoxy			; move to last row
 00000145  BA 000009A8 R		mov EDX, OFFSET borT
 0000014A  E8 00000000 E		call	WriteString		; draw bottom border

					ret
 0000014F  5B		   *	    pop    ebx
 00000150  58		   *	    pop    eax
 00000151  C3		   *	    ret    00000h
 00000152			init ENDP

 00000152			input PROC USES EAX EDX
 00000152  50		   *	    push   eax
 00000153  52		   *	    push   edx
 00000154			LKey:
 00000154  B8 0000000A		    mov  EAX, 10
 00000159  E8 00000000 E	    call Delay

 0000015E  E8 00000000 E	    call ReadKey			; is there a key to read
 00000163  0F 84 000000E2	    jz LNKey

					; exit if escape
					.IF DX == VK_ESCAPE
 00000169  66| 83 FA 1B	   *	    cmp    dx, VK_ESCAPE
 0000016D  75 18	   *	    jne    @C0001
 0000016F  C6 05 0000096D R			mov p1Dir, 4
	   04
 00000176  C6 05 0000096E R			mov p2Dir, 4
	   04
 0000017D  E9 000000C9				jmp LNKey
					; player 1 directional
					; AND conditions prevent going back on yourself
					.ELSEIF DX == 'W' && p1Dir != 2
 00000182  E9 000000C4	   *	    jmp    @C0003
 00000187		   *@C0001:
 00000187  66| 83 FA 57	   *	    cmp    dx, 'W'
 0000018B  75 15	   *	    jne    @C0004
 0000018D  80 3D 0000096D R
	   02		   *	    cmp    p1Dir, 002h
 00000194  74 0C	   *	    je	@C0004
 00000196  C6 05 0000096D R			mov p1Dir, 0
	   00
					.ELSEIF DX == 'A' && p1Dir != 1
 0000019D  E9 000000A9	   *	    jmp    @C0007
 000001A2		   *@C0004:
 000001A2  66| 83 FA 41	   *	    cmp    dx, 'A'
 000001A6  75 15	   *	    jne    @C0008
 000001A8  80 3D 0000096D R
	   01		   *	    cmp    p1Dir, 001h
 000001AF  74 0C	   *	    je	@C0008
 000001B1  C6 05 0000096D R			mov p1Dir, 3
	   03
					.ELSEIF DX == 'S' && p1Dir != 0
 000001B8  E9 0000008E	   *	    jmp    @C000B
 000001BD		   *@C0008:
 000001BD  66| 83 FA 53	   *	    cmp    dx, 'S'
 000001C1  75 12	   *	    jne    @C000C
 000001C3  80 3D 0000096D R
	   00		   *	    cmp    p1Dir, 000h
 000001CA  74 09	   *	    je	@C000C
 000001CC  C6 05 0000096D R			mov p1Dir, 2
	   02
					.ELSEIF DX == 'D' && p1Dir != 3
 000001D3  EB 76	   *	    jmp    @C000F
 000001D5		   *@C000C:
 000001D5  66| 83 FA 44	   *	    cmp    dx, 'D'
 000001D9  75 12	   *	    jne    @C0010
 000001DB  80 3D 0000096D R
	   03		   *	    cmp    p1Dir, 003h
 000001E2  74 09	   *	    je	@C0010
 000001E4  C6 05 0000096D R			mov p1Dir, 1
	   01
					; player 2 directional
					; AND conditions prevent going back on yourself
					.ELSEIF DX == VK_UP && p2Dir != 2
 000001EB  EB 5E	   *	    jmp    @C0013
 000001ED		   *@C0010:
 000001ED  66| 83 FA 26	   *	    cmp    dx, VK_UP
 000001F1  75 12	   *	    jne    @C0014
 000001F3  80 3D 0000096E R
	   02		   *	    cmp    p2Dir, 002h
 000001FA  74 09	   *	    je	@C0014
 000001FC  C6 05 0000096E R			mov p2Dir, 0
	   00
					.ELSEIF DX == VK_LEFT && p2Dir != 1
 00000203  EB 46	   *	    jmp    @C0017
 00000205		   *@C0014:
 00000205  66| 83 FA 25	   *	    cmp    dx, VK_LEFT
 00000209  75 12	   *	    jne    @C0018
 0000020B  80 3D 0000096E R
	   01		   *	    cmp    p2Dir, 001h
 00000212  74 09	   *	    je	@C0018
 00000214  C6 05 0000096E R			mov p2Dir, 3
	   03
					.ELSEIF DX == VK_DOWN && p2Dir != 0
 0000021B  EB 2E	   *	    jmp    @C001B
 0000021D		   *@C0018:
 0000021D  66| 83 FA 28	   *	    cmp    dx, VK_DOWN
 00000221  75 12	   *	    jne    @C001C
 00000223  80 3D 0000096E R
	   00		   *	    cmp    p2Dir, 000h
 0000022A  74 09	   *	    je	@C001C
 0000022C  C6 05 0000096E R			mov p2Dir, 2
	   02
					.ELSEIF DX == VK_RIGHT && p2Dir != 3
 00000233  EB 16	   *	    jmp    @C001F
 00000235		   *@C001C:
 00000235  66| 83 FA 27	   *	    cmp    dx, VK_RIGHT
 00000239  75 10	   *	    jne    @C0020
 0000023B  80 3D 0000096E R
	   03		   *	    cmp    p2Dir, 003h
 00000242  74 07	   *	    je	@C0020
 00000244  C6 05 0000096E R			mov p2Dir, 1
	   01
					.ENDIF
 0000024B		   *@C0020:
 0000024B		   *@C001F:
 0000024B		   *@C001B:
 0000024B		   *@C0017:
 0000024B		   *@C0013:
 0000024B		   *@C000F:
 0000024B		   *@C000B:
 0000024B		   *@C0007:
 0000024B		   *@C0003:

 0000024B			LNKey:
					ret
 0000024B  5A		   *	    pop    edx
 0000024C  58		   *	    pop    eax
 0000024D  C3		   *	    ret    00000h
 0000024E			input ENDP

 0000024E			update PROC USES EBX ECX EDX ESI
 0000024E  53		   *	    push   ebx
 0000024F  51		   *	    push   ecx
 00000250  52		   *	    push   edx
 00000251  56		   *	    push   esi
					.IF p1Dir == 0			; update player 1 position
 00000252  80 3D 0000096D R
	   00		   *	    cmp    p1Dir, 000h
 00000259  75 09	   *	    jne    @C0023
 0000025B  66| FF 0D				dec p1Pos.y
	   00000967 R
					.ELSEIF p1Dir == 1
 00000262  EB 34	   *	    jmp    @C0025
 00000264		   *@C0023:
 00000264  80 3D 0000096D R
	   01		   *	    cmp    p1Dir, 001h
 0000026B  75 09	   *	    jne    @C0026
 0000026D  66| FF 05				inc p1Pos.x
	   00000965 R
					.ELSEIF p1Dir == 2
 00000274  EB 22	   *	    jmp    @C0028
 00000276		   *@C0026:
 00000276  80 3D 0000096D R
	   02		   *	    cmp    p1Dir, 002h
 0000027D  75 09	   *	    jne    @C0029
 0000027F  66| FF 05				inc p1Pos.y
	   00000967 R
					.ELSEIF p1Dir == 3
 00000286  EB 10	   *	    jmp    @C002B
 00000288		   *@C0029:
 00000288  80 3D 0000096D R
	   03		   *	    cmp    p1Dir, 003h
 0000028F  75 07	   *	    jne    @C002C
 00000291  66| FF 0D				dec p1Pos.x
	   00000965 R
					.ENDIF
 00000298		   *@C002C:
 00000298		   *@C002B:
 00000298		   *@C0028:
 00000298		   *@C0025:

					.IF p2Dir == 0			; update player 2 position
 00000298  80 3D 0000096E R
	   00		   *	    cmp    p2Dir, 000h
 0000029F  75 09	   *	    jne    @C002E
 000002A1  66| FF 0D				dec p2Pos.y
	   0000096B R
					.ELSEIF p2Dir == 1
 000002A8  EB 34	   *	    jmp    @C0030
 000002AA		   *@C002E:
 000002AA  80 3D 0000096E R
	   01		   *	    cmp    p2Dir, 001h
 000002B1  75 09	   *	    jne    @C0031
 000002B3  66| FF 05				inc p2Pos.x
	   00000969 R
					.ELSEIF p2Dir == 2
 000002BA  EB 22	   *	    jmp    @C0033
 000002BC		   *@C0031:
 000002BC  80 3D 0000096E R
	   02		   *	    cmp    p2Dir, 002h
 000002C3  75 09	   *	    jne    @C0034
 000002C5  66| FF 05				inc p2Pos.y
	   0000096B R
					.ELSEIF p2Dir == 3
 000002CC  EB 10	   *	    jmp    @C0036
 000002CE		   *@C0034:
 000002CE  80 3D 0000096E R
	   03		   *	    cmp    p2Dir, 003h
 000002D5  75 07	   *	    jne    @C0037
 000002D7  66| FF 0D				dec p2Pos.x
	   00000969 R
					.ENDIF
 000002DE		   *@C0037:
 000002DE		   *@C0036:
 000002DE		   *@C0033:
 000002DE		   *@C0030:

 000002DE  66| 0F B6 1D			movzx BX, mCol
	   00000001 R
 000002E6  66| 0F B6 0D			movzx CX, mRow
	   00000000 R

 000002EE  BA 00000000			mov EDX, 0

					; player 1 out of bounds
					.IF p1Pos.x < 0 || p1Pos.x > BX || p1Pos.y < 0 || p1Pos.y > CX
 000002F3  66| 83 3D
	   00000965 R 00   *	    cmp    p1Pos . X, 000h
 000002FB  72 1C	   *	    jb	@C003A
 000002FD  66| 39 1D
	   00000965 R	   *	    cmp    p1Pos . X, bx
 00000304  77 13	   *	    ja	@C003A
 00000306  66| 83 3D
	   00000967 R 00   *	    cmp    p1Pos . Y, 000h
 0000030E  72 09	   *	    jb	@C003A
 00000310  66| 39 0D
	   00000967 R	   *	    cmp    p1Pos . Y, cx
 00000317  76 05	   *	    jbe    @C0039
 00000319		   *@C003A:
 00000319  83 C2 01				add EDX, 1			; player 1 loses
					.ELSE
 0000031C  EB 2E	   *	    jmp    @C003E
 0000031E		   *@C0039:
						; get the value from the matrix given player 1's coordinates
 0000031E  8D 35 00000005 R			lea ESI, grid
 00000324  0F B7 05				movzx EAX, p1Pos.y
	   00000967 R
 0000032B  BB 00000050				mov EBX, cols
 00000330  F7 E3				mul EBX
 00000332  03 F0				add ESI, EAX
 00000334  0F B7 05				movzx EAX, p1Pos.x
	   00000965 R
 0000033B  03 F0				add ESI, EAX
 0000033D  0F B6 06				movzx EAX, BYTE PTR [ESI]

						.IF EAX > 0			; did player 1 crash
 00000340  83 F8 00	   *	    cmp    eax, 000h
 00000343  76 03	   *	    jbe    @C003F
 00000345  83 C2 01					add EDX, 1
						.ENDIF
						
 00000348		   *@C003F:
 00000348  B0 01				mov AL, 1
 0000034A  88 06				mov [ESI], AL		; update the grid
					.ENDIF
 0000034C		   *@C003E:

 0000034C  52				push EDX				; save edx for output

 0000034D  66| 0F B6 1D			movzx BX, mCol
	   00000001 R
 00000355  66| 0F B6 0D			movzx CX, mRow
	   00000000 R

					; player 2 out of bounds
					.IF p2Pos.x < 0 || p2Pos.x > BX || p2Pos.y < 0 || p2Pos.y > CX
 0000035D  66| 83 3D
	   00000969 R 00   *	    cmp    p2Pos . X, 000h
 00000365  72 1C	   *	    jb	@C0042
 00000367  66| 39 1D
	   00000969 R	   *	    cmp    p2Pos . X, bx
 0000036E  77 13	   *	    ja	@C0042
 00000370  66| 83 3D
	   0000096B R 00   *	    cmp    p2Pos . Y, 000h
 00000378  72 09	   *	    jb	@C0042
 0000037A  66| 39 0D
	   0000096B R	   *	    cmp    p2Pos . Y, cx
 00000381  76 06	   *	    jbe    @C0041
 00000383		   *@C0042:
 00000383  5A					pop EDX

 00000384  83 C2 02				add EDX, 2			; player 2 loses
					.ELSE
 00000387  EB 2F	   *	    jmp    @C0046
 00000389		   *@C0041:
						; get the value from the matrix given player 2's coordinates
 00000389  8D 35 00000005 R			lea ESI, grid
 0000038F  0F B7 05				movzx EAX, p2Pos.y
	   0000096B R
 00000396  BB 00000050				mov EBX, cols
 0000039B  F7 E3				mul EBX
 0000039D  03 F0				add ESI, EAX
 0000039F  0F B7 05				movzx EAX, p2Pos.x
	   00000969 R
 000003A6  03 F0				add ESI, EAX
 000003A8  0F B6 06				movzx EAX, BYTE PTR [ESI]

 000003AB  5A					pop EDX

						.IF EAX > 0			; did player 2 crash
 000003AC  83 F8 00	   *	    cmp    eax, 000h
 000003AF  76 03	   *	    jbe    @C0047
 000003B1  83 C2 02					add EDX, 2
						.ENDIF
						
 000003B4		   *@C0047:
 000003B4  B0 01				mov AL, 1
 000003B6  88 06				mov [ESI],  AL		; update the grid
					.ENDIF
 000003B8		   *@C0046:

					; send result to output
 000003B8  8B C2			mov EAX, EDX

					ret
 000003BA  5E		   *	    pop    esi
 000003BB  5A		   *	    pop    edx
 000003BC  59		   *	    pop    ecx
 000003BD  5B		   *	    pop    ebx
 000003BE  C3		   *	    ret    00000h
 000003BF			update ENDP

 000003BF			check PROC USES EDX
 000003BF  52		   *	    push   edx
 000003C0  50				push EAX

 000003C1  B0 0F			mov AL, white
 000003C3  B4 00			mov AH, black
 000003C5  E8 00000000 E		call	SetTextColor

 000003CA  58				pop EAX

 000003CB  83 F8 02			cmp EAX, 2		; player 2 loses, player 1 wins
 000003CE  74 0F			je LP1W
 000003D0  83 F8 01			cmp EAX, 1		; player 1 loses, player 2 wins
 000003D3  74 26			je LP2W
 000003D5  83 F8 03			cmp EAX, 3		; both lose, it's a tie
 000003D8  74 3D			je LTie
 000003DA  E9 00000091			jmp LFin

 000003DF			LP1W:
 000003DF  8A 15 00000003 R		mov DL, hCol
 000003E5  80 EA 05			sub DL, 5
 000003E8  B6 01			mov DH, 1
 000003EA  E8 00000000 E		call	Gotoxy
 000003EF  BA 0000096F R		mov EDX, OFFSET p1Win
 000003F4  E8 00000000 E		call	WriteString		; print player 1 victory
 000003F9  EB 38			jmp LTry

 000003FB			LP2W:
 000003FB  8A 15 00000003 R		mov DL, hCol
 00000401  80 EA 05			sub DL, 5
 00000404  B6 01			mov DH, 1
 00000406  E8 00000000 E		call	Gotoxy
 0000040B  BA 0000097D R		mov EDX, OFFSET p2Win
 00000410  E8 00000000 E		call	WriteString		; print player 2 victory
 00000415  EB 1C			jmp LTry

 00000417			LTie:
 00000417  8A 15 00000003 R		mov DL, hCol
 0000041D  80 EA 06			sub DL, 6
 00000420  B6 01			mov DH, 1
 00000422  E8 00000000 E		call	Gotoxy
 00000427  BA 0000098B R		mov EDX, OFFSET tie
 0000042C  E8 00000000 E		call	WriteString		; print tie
 00000431  EB 00			jmp LTry

 00000433			LTry:
 00000433  8A 15 00000003 R		mov DL, hCol
 00000439  80 EA 07			sub DL, 7
 0000043C  B6 02			mov DH, 2
 0000043E  E8 00000000 E		call Gotoxy
 00000443  BA 00000997 R		mov EDX, OFFSET retry	; print retry text
 00000448  E8 00000000 E		call WriteString

 0000044D			LKey:
 0000044D  E8 00000000 E		call ReadKey			; check for retry / exit
 00000452  74 F9			jz LKey

					.IF DX == 'R'
 00000454  66| 83 FA 52	   *	    cmp    dx, 'R'
 00000458  75 07	   *	    jne    @C0049
 0000045A  B8 00000004				mov EAX, 4			; enable retry
					.ELSEIF DX == VK_ESCAPE
 0000045F  EB 0F	   *	    jmp    @C004B
 00000461		   *@C0049:
 00000461  66| 83 FA 1B	   *	    cmp    dx, VK_ESCAPE
 00000465  75 07	   *	    jne    @C004C
 00000467  B8 00000001				mov EAX, 1			; enable exit
					.ELSE
 0000046C  EB 02	   *	    jmp    @C004E
 0000046E		   *@C004C:
 0000046E  EB DD				jmp LKey
					.ENDIF
 00000470		   *@C004E:
 00000470		   *@C004B:
					
 00000470			LFin:
					ret
 00000470  5A		   *	    pop    edx
 00000471  C3		   *	    ret    00000h
 00000472			check ENDP


 00000472			drawPs PROC USES EAX EDX
 00000472  50		   *	    push   eax
 00000473  52		   *	    push   edx
 00000474  66| A1			mov AX, p1Pos.x
	   00000965 R
 0000047A  66| 40			inc AX					; border offset x
 0000047C  8A D0			mov DL, AL
 0000047E  66| A1			mov AX, p1Pos.y
	   00000967 R
 00000484  66| 40			inc AX					; border offset y
 00000486  8A F0			mov DH, AL
 00000488  E8 00000000 E		call	Gotoxy
 0000048D  B8 00000044			mov  eax,red+(red*16)
					;mov AL, red				; player 1's color
					;mov AH, red
 00000492  E8 00000000 E		call	SetTextColor
 00000497  66| B8 0020			mov AX, ' '
 0000049B  E8 00000000 E		call	WriteChar		; draw at player 1 position

 000004A0  66| A1			mov AX, p2Pos.x
	   00000969 R
 000004A6  66| 40			inc AX					; border offset x
 000004A8  8A D0			mov DL, AL
 000004AA  66| A1			mov AX, p2Pos.y
	   0000096B R
 000004B0  66| 40			inc AX					; border offset y
 000004B2  8A F0			mov DH, AL
 000004B4  E8 00000000 E		call	Gotoxy
 000004B9  B8 00000011			mov  eax,blue+(blue*16)
					;mov AL, blue			; player 2's color
					;mov AH, blue
 000004BE  E8 00000000 E		call	SetTextColor
 000004C3  66| B8 0020			mov AX, ' '
 000004C7  E8 00000000 E		call	WriteChar		; draw at player 2 position

					ret
 000004CC  5A		   *	    pop    edx
 000004CD  58		   *	    pop    eax
 000004CE  C3		   *	    ret    00000h
 000004CF			drawPs ENDP

				END main
Microsoft (R) Macro Assembler Version 14.16.27027.1	    03/15/19 12:26:49
AddTwo.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000A4E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004CF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
check  . . . . . . . . . . . . .	P Near	 000003BF _TEXT	Length= 000000B3 Public STDCALL
  LP1W . . . . . . . . . . . . .	L Near	 000003DF _TEXT	
  LP2W . . . . . . . . . . . . .	L Near	 000003FB _TEXT	
  LTie . . . . . . . . . . . . .	L Near	 00000417 _TEXT	
  LTry . . . . . . . . . . . . .	L Near	 00000433 _TEXT	
  LKey . . . . . . . . . . . . .	L Near	 0000044D _TEXT	
  LFin . . . . . . . . . . . . .	L Near	 00000470 _TEXT	
drawPs . . . . . . . . . . . . .	P Near	 00000472 _TEXT	Length= 0000005D Public STDCALL
init . . . . . . . . . . . . . .	P Near	 00000067 _TEXT	Length= 000000EB Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000F3 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000123 _TEXT	
input  . . . . . . . . . . . . .	P Near	 00000152 _TEXT	Length= 000000FC Public STDCALL
  LKey . . . . . . . . . . . . .	L Near	 00000154 _TEXT	
  LNKey  . . . . . . . . . . . .	L Near	 0000024B _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000067 Public STDCALL
  L0 . . . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000000A _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000030 _TEXT	
  LExit  . . . . . . . . . . . .	L Near	 00000052 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
update . . . . . . . . . . . . .	P Near	 0000024E _TEXT	Length= 00000171 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
borM . . . . . . . . . . . . . .	Byte	 000009FB _DATA	
borT . . . . . . . . . . . . . .	Byte	 000009A8 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
cols . . . . . . . . . . . . . .	Number	 00000050h   
count  . . . . . . . . . . . . .	Byte	 00000004 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
gridS  . . . . . . . . . . . . .	Number	 00000960h   
grid . . . . . . . . . . . . . .	Byte	 00000005 _DATA	
hCol . . . . . . . . . . . . . .	Byte	 00000003 _DATA	
hRow . . . . . . . . . . . . . .	Byte	 00000002 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
mCol . . . . . . . . . . . . . .	Byte	 00000001 _DATA	
mRow . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
p1Dir  . . . . . . . . . . . . .	Byte	 0000096D _DATA	
p1Pos  . . . . . . . . . . . . .	COORD	 00000965 _DATA	
p1Win  . . . . . . . . . . . . .	Byte	 0000096F _DATA	
p2Dir  . . . . . . . . . . . . .	Byte	 0000096E _DATA	
p2Pos  . . . . . . . . . . . . .	COORD	 00000969 _DATA	
p2Win  . . . . . . . . . . . . .	Byte	 0000097D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
retry  . . . . . . . . . . . . .	Byte	 00000997 _DATA	
rows . . . . . . . . . . . . . .	Number	 0000001Eh   
tie  . . . . . . . . . . . . . .	Byte	 0000098B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
